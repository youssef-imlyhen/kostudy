import { useState, useEffect, useCallback } from 'react';
import { useLocalStorage } from './useLocalStorage';
import { categoryEmojis as defaultEmojis } from '../data/questions';

// Word to emoji mapping for fallback mechanism
const wordEmojis: Record<string, string> = {
  // Business/Finance
  'business': 'üíº',
  'finance': 'üí∞',
  'marketing': 'üì¢',
  'growth': 'üìà',
  'sales': 'üõí',
  'economy': 'üìä',
  'investment': 'üè¶',
  
  // Technology
  'technology': 'üíª',
  'tech': 'üíª',
  'computer': 'üíª',
  'software': 'üñ•Ô∏è',
  'hardware': 'üñ±Ô∏è',
  'internet': 'üåê',
  'web': 'üåê',
  'digital': 'üì±',
  'app': 'üì±',
  'mobile': 'üì±',
  'ai': 'ü§ñ',
  'artificial': 'ü§ñ',
  'intelligence': 'üß†',
  
  // Content/Creative
  'content': 'üìù',
  'creative': 'üé®',
  'design': 'üé®',
  'video': 'üé•',
  'photo': 'üì∏',
  'photography': 'üì∏',
  'music': 'üéµ',
  'audio': 'üéµ',
  'writing': '‚úçÔ∏è',
  'book': 'üìñ',
  'literature': 'üìñ',
  
  // Education/Learning
  'education': 'üéì',
  'learning': 'üìö',
  'school': 'üè´',
  'university': 'üèõÔ∏è',
  'study': 'üìñ',
  'academic': 'üè´',
  'knowledge': 'üß†',
  'science': 'üî¨',
  'math': 'üî¢',
  'mathematics': 'üî¢',
  'history': 'üèõÔ∏è',
  'geography': 'üåç',
  'language': 'üó£Ô∏è',
  
  // Analytics/Data
  'analytics': 'üìä',
  'data': 'üìà',
  'statistics': 'üìä',
  'research': 'üîç',
  'analysis': 'üî¨',
  
  // General
  'general': 'üìå',
  'miscellaneous': 'üì¶',
  'other': 'üìé',
  'new': 'üÜï',
  'basic': 'üî∞',
  'fundamentals': 'üß±',
  'introduction': 'üëã',
  'beginner': 'üë∂',
};

export const useCategoryEmojis = () => {
  const [customEmojis, setCustomEmojis] = useLocalStorage<Record<string, string>>('customCategoryEmojis', {});
  const [allEmojis, setAllEmojis] = useState<Record<string, string>>({ ...defaultEmojis });

  useEffect(() => {
    setAllEmojis({ ...defaultEmojis, ...customEmojis });
  }, [customEmojis]);

  const addCustomEmoji = useCallback((category: string, emoji: string) => {
    setCustomEmojis(prev => ({ ...prev, [category]: emoji }));
  }, [setCustomEmojis]);

  const getEmoji = useCallback((categoryName: string): string => {
    const normalizedCategory = categoryName.toLowerCase();

    // Direct match in combined emojis
    if (allEmojis[normalizedCategory]) {
      return allEmojis[normalizedCategory];
    }
    if (allEmojis[categoryName]) {
        return allEmojis[categoryName];
    }

    // Fallback to word-based matching
    const words = normalizedCategory.replace(/_/g, ' ').split(' ');
    for (const word of words) {
      if (wordEmojis[word]) {
        return wordEmojis[word];
      }
    }

    return '‚ùì'; // Default fallback
  }, [allEmojis]);

  return { emojis: allEmojis, addCustomEmoji, getEmoji };
};